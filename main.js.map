{"version":3,"file":"main.js","mappings":"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","sources":["webpack://engr180w-checker/./src/index.css","webpack://engr180w-checker/./src/index.css?0538","webpack://engr180w-checker/./src/AnnotatedText.tsx","webpack://engr180w-checker/./src/App.tsx","webpack://engr180w-checker/./src/BannedWords.ts","webpack://engr180w-checker/./src/Editor.tsx","webpack://engr180w-checker/./src/Issue.tsx","webpack://engr180w-checker/./src/main.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA,cAAc;AACd,oBAAoB;AACpB,mBAAmB\",\"sourcesContent\":[\"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/dist/cjs.js!./index.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/dist/cjs.js!./index.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useEffect, useState } from \"react\";\nimport writeGood from \"write-good\";\nimport { Issue } from \"./Issue\";\nimport { syllable } from \"syllable\";\nimport { WORD_BAN_LIST } from \"./BannedWords\";\nfunction AnnotatedText({ text }) {\n    const WhitespaceRegex = /\\s/g;\n    const [mouseIndex, setMouseIndex] = useState(-1);\n    const [suggestions, setSuggestions] = useState([]);\n    const [issueCount, setIssueCount] = useState([]);\n    useEffect(() => {\n        const suggestions = writeGood(text);\n        function addSuggestion(index, offset, reason) {\n            suggestions.push({\n                index,\n                offset,\n                reason,\n            });\n        }\n        const paragraphRegex = /\\n[^\\n]+|[^\\n]+\\n|([^\\n]+$)/gi;\n        let match;\n        while ((match = paragraphRegex.exec(text))) {\n            const paragraph = match[0];\n            const paragraphStart = match.index;\n            const paragraphOffset = match[0].length;\n            // suggestions.push({\n            //   index: match.index,\n            //   offset: match[0].length,\n            //   reason: \"this is a paragraph\",\n            // });\n            const sentenceRegex = /[^.]+./gi;\n            const sentences = paragraph.split(\". \").length;\n            if (sentences < 3 || sentences > 5) {\n                // prettier-ignore\n                addSuggestion(paragraphStart, paragraphOffset, `Paragraph sentence count = ${sentences}, Expected >= 3 and <= 5`);\n            }\n            while ((match = sentenceRegex.exec(paragraph))) {\n                const sentence = match[0];\n                const sentenceStart = match.index + paragraphStart;\n                const sentenceOffset = sentence.length;\n                // console.log(sentence, sentence.split(\" \").length);\n                const wordCount = sentence.split(\" \").length;\n                if (wordCount > 20) {\n                    // prettier-ignore\n                    addSuggestion(sentenceStart, sentenceOffset, `Long sentence! Words = ${wordCount}, Expected <= 20`);\n                }\n                if (wordCount > 25) {\n                    // prettier-ignore\n                    addSuggestion(sentenceStart, sentenceOffset, `Very long sentence! Words = ${wordCount}, Expected <= 25`);\n                }\n                const wordRegex = / [^ ]+|[^ ]+ /gi;\n                while ((match = wordRegex.exec(sentence))) {\n                    const word = match[0].trim();\n                    const wordStart = match.index + sentenceStart;\n                    const wordOffset = match[0].length;\n                    const syllables = syllable(word);\n                    if (syllables > 2) {\n                        // prettier-ignore\n                        addSuggestion(wordStart, wordOffset, `Long word! Syllables = ${syllables}, Expected <= 2`);\n                    }\n                    if (syllables > 3) {\n                        // prettier-ignore\n                        addSuggestion(wordStart, wordOffset, `Very long word! Syllables = ${syllables}, Expected <= 3`);\n                    }\n                    if (WORD_BAN_LIST[word]) {\n                        // prettier-ignore\n                        addSuggestion(wordStart, wordOffset, `\"${word}\": ${WORD_BAN_LIST[word]}`);\n                    }\n                }\n            }\n        }\n        const issueCount = [...new Array(text.length)].map(() => 0);\n        for (const { index, offset } of suggestions) {\n            for (let i = 0; i < offset; ++i) {\n                issueCount[index + i] += 1;\n            }\n        }\n        setSuggestions(suggestions);\n        setIssueCount(issueCount);\n    }, [text]);\n    function issueCountToColor(issues) {\n        if (issues >= 5)\n            return \"text-red-500\";\n        else {\n            return [\n                \"\",\n                \"text-yellow-500\",\n                \"text-yellow-800\",\n                \"text-orange-500\",\n                \"text-orange-800\",\n            ][issues];\n        }\n    }\n    return (React.createElement(\"div\", { className: 'p-4 m-4 w-full flex flex-row gap-4 h-full' },\n        React.createElement(\"div\", { className: 'p-4 flex flex-row w-1/2 flex-wrap font-mono rounded-lg bg-white border border-black/20 overflow-y-scroll max-h-[90vh]' }, text.split(\"\").map((c, index) => (React.createElement(\"div\", { key: index, className: `${WhitespaceRegex.test(c) ? \"px-2\" : \"\"} ${issueCountToColor(issueCount[index])} ${index === mouseIndex ? \"bg-slate-500\" : \"\"}`, onMouseOver: () => setMouseIndex(index) }, c)))),\n        React.createElement(\"div\", { className: 'p-4 bg-white border border-black/20 rounded-md text-black w-full' },\n            text.split(/\\w+/g).length + \" words\",\n            suggestions.map(({ reason, index, offset }, suggestionIndex) => mouseIndex >= index &&\n                mouseIndex <= index + offset && (React.createElement(Issue, { label: '!', description: reason, key: suggestionIndex }))))));\n}\nexport default AnnotatedText;\n","import React from \"react\";\nimport Editor from \"./Editor\";\nfunction App() {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", null, \"Paste text\"),\n        React.createElement(Editor, null)));\n}\nexport default App;\n","export const WORD_BAN_LIST = {\n    will: \"future tense\",\n    had: \"past tense\",\n    has: \"past tense\",\n    was: \"past tense\",\n    by: \"passive voice?\",\n    being: \"passive voice?\",\n    gets: \"passive voice?\",\n    \"are used to\": \"CCG: remove\",\n    \"has been\": \"CCG: replace with is or remove\",\n    \"has finished\": \"CCG: replace with is done / is complete\",\n    \"has the option of\": \"CCG: replace with can\",\n    \"have finished\": \"CCG: replace with are done\",\n    \"have the ability to\": \"CCG: replace with can\",\n    \"if you want to\": \"CCG: replace with to\",\n    \"in order to\": \"CCG: replace with to\",\n    \"is able to\": \"CCG: replace with can\",\n    \"is designed to\": \"CCG: remove\",\n    \"offers the ability to\": \"CCG: replace with lets you\",\n    \"once\": \"CCG: replace with one time / after\",\n    \"since\": \"CCG: replace with because / after\",\n    \"will also be able to\": \"CCG: replace with can also\",\n    \"will be\": \"CCG: replace with is / are or remove\",\n    \"will be able to\": \"CCG: remove\",\n    \"will have been\": \"CCG: replace with is / are\",\n    \"will have the ability to\": \"CCG: replace with can\",\n    \"will have to\": \"CCG: replace with must\",\n    \"will have to be\": \"CCG: replace with must be\",\n    \"will then be\": \"CCG: replace with are / is\",\n    \"without the need to access\": \"CCG: replace with without accessing\",\n    \"would be\": \"CCG: replace with are / is\",\n    \"would like\": \"CCG: replace with want\",\n};\n","import React, { useState } from \"react\";\nimport AnnotatedText from \"./AnnotatedText\";\nfunction Editor() {\n    const [content, setContent] = useState(\"The FitnessGram™ Pacer Test is a multistage aerobic capacity test that progressively gets more difficult as it continues. The 20 meter pacer test will begin in 30 seconds. Line up at the start. The running speed starts slowly, but gets faster each minute after you hear this signal. [beep] A single lap should be completed each time you hear this sound. [ding] Remember to run in a straight line, and run as long as possible. The second time you fail to complete a lap before the sound, your test is over. The test will begin on the word start. On your mark, get ready, start.\\n\");\n    return (React.createElement(\"div\", { className: 'm-4 flex flex-col items-center max-h-screen' },\n        React.createElement(\"textarea\", { onChange: (event) => setContent(event.target.value), placeholder: \"add text to check\", className: 'w-full border border-black h-12' }),\n        React.createElement(AnnotatedText, { text: content })));\n}\nexport default Editor;\n","import React, { useState } from \"react\";\nconst BG_COLORS = {\n    0: \"bg-yellow-100\",\n    1: \"bg-orange-100\",\n    2: \"bg-red-100\",\n    3: \"bg-red-100\",\n};\nfunction Issue({ label, description, severity = 0, key }) {\n    const [active, _setActive] = useState(true);\n    return (React.createElement(\"div\", { className: `flex flex-col p-1 rounded-sm ${active ? \"\" : \"opacity-50\"}`, key: key },\n        React.createElement(\"div\", { className: `font-semibold text-xl ${BG_COLORS[severity]}` }, label),\n        React.createElement(\"div\", null,\n            React.createElement(\"div\", { className: 'text-black/80 text-base' }, description))));\n}\nfunction IssueListing({ issues }) {\n    return (React.createElement(React.Fragment, null, issues.getIssues().map(({ label, description, severity }, index) => (React.createElement(Issue, { label: label, description: description, key: index, severity: severity })))));\n}\nexport default Issue;\nexport { Issue, IssueListing };\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nReactDOM.createRoot(document.getElementById(\"root\")).render(React.createElement(React.StrictMode, null,\n    React.createElement(App, null)));\n"],"names":[],"sourceRoot":""}